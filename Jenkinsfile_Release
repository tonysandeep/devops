pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                        cleanWs()
                        checkout([  
                            $class: 'GitSCM', 
                            branches: [[name: 'refs/heads/Dev']], 
                            doGenerateSubmoduleConfigurations: false, 
                            extensions: [[$class: 'CleanCheckout', cleancheckout: 'master'],[$class: 'LocalBranch', localBranch: 'Dev'],[$class: 'RelativeTargetDirectory', relativeTargetDir: './']], 
                            submoduleCfg: [], 
                            userRemoteConfigs: [[ url: 'https://github.com/tonysandeep/devops.git']]
                        ])

                echo 'Clean Build'
                    sh "ls"
                    sh "pwd"
                    sh 'mvn clean compile -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=addressbook -Dsonar.host.url=http://35.245.18.194:8085/ -Dsonar.login=c3ae706dccdd6ac86592ed80d60d8c77cbc97e24'
                    //sh "mvn sonar:sonar clean compile -Dtest=\\!TestRunner* -DfailIfNoTests=false -Dsonar.projectKey=employee_jdbc -Dsonar.host.url=http://34.93.123.206/ -Dsonar.login=aac7cc7809ddc82ce0070e3f74726c71216936b6"
                    //sh 'mvn clean compile' 
            }
        }

        stage('Package') {
            steps {
                echo 'Packaging'
                sh 'mvn package -DskipTests'
            }
        }
        stage("publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    pom = readMavenPom file: "pom.xml";
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging]//,
                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                /*[artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]*/
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
        stage('Deploy') {
            steps {
                sh 'curl --upload-file target/addressbook.war "http://tomcat:password@35.245.18.194:8083/manager/text/deploy?path=/addressbook&update=true"'
                //sh 'curl --upload-file target/addressbook.war "http://tomcat:password@34.93.238.186:8081/manager/text/deploy?path=/addressbook&update=true"'
                //withCredentials([usernamePassword(credentialsId: 'nexusadmin', passwordVariable: 'pass', usernameVariable: 'user')]) {
                //    sh 'curl --upload-file target/hello-world-war-1.0.0-SNAPSHOT.war "http://${user}:${pass}@34.93.240.217:8082/manager/text/deploy?path=/hello&update=true"'
                //}
            }
        }
        
	    	stage("Unit Test") {
                  steps {
                     echo ' Unit Test Stage'
                        sh 'mvn test'
						junit 'target\\surefire-reports\\*.xml'			
                        }
                    } 
               
            stage("Jacoco Code Coverage report") {
                    steps {
                         jacoco(execPattern: 'target\\*.exec')
        		        }
                    } 
		     

		    stage('Release Approval') {
            steps {
                echo 'Confirm the deployment'
				echo "waiting for approval"
                timeout( time: 120, unit: "SECONDS" )
               {
                input 'Do you want to proceed to the Deployment?'
                milestone 1
					}
				}
			} 
			
			/*stage('Staging snapshot version') {
            steps {
                echo 'set version to snapshot'
                script{
					def releasedVersion = getReleaseVersion()
                        print releasedVersion
                        sh "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${releasedVersion}"
                }
            }
        }*/			
			
			stage('Sanity Test') {
            steps {
                echo 'clean test'
                sh 'mvn clean test'
               
            }
        }
        
        stage('Release Artifact Publish to Nexus') {
            steps {
                echo 'Upload artifact to nexus'
                script{
				def releasedVersion = getReleaseVersion()
                print releasedVersion
				withCredentials([usernamePassword(credentialsId: 'gituser', passwordVariable: 'passgit', usernameVariable: 'usergit')]) {
   				sh "mvn -B clean release:prepare release:perform -Darguments='-Dmaven.javadoc.skip=true' -Dusername=${usergit} -Dpassword=${passgit} -Dtag=release-${releasedVersion} -DreleaseVersion=${releasedVersion}"
					}
                }
			}
			
        }
        
        stage('Promote Artifact to UAT ') {
            steps {
                sh 'curl --upload-file target/addressbook.war "http://tomcat:password@35.245.18.194:8083/manager/text/deploy?path=/addressbook-release&update=true"'
                //sh 'curl --upload-file target/addressbook.war "http://tomcat:password@34.93.238.186:8081/manager/text/deploy?path=/addressbook&update=true"'
                //withCredentials([usernamePassword(credentialsId: 'nexusadmin', passwordVariable: 'pass', usernameVariable: 'user')]) {
                //    sh 'curl --upload-file target/hello-world-war-1.0.0-SNAPSHOT.war "http://${user}:${pass}@34.93.240.217:8082/manager/text/deploy?path=/hello&update=true"'
                //}
            }
        }
            
			
    }     
        
    tools {
        maven 'maven'
        jdk 'javajdk'
    }
    environment {
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "35.245.18.194:8084"
        //NEXUS_URL = "35.200.184.59:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "maven-snapshots"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus"
    }
    

    post {
         always {
            echo 'JENKINS PIPELINE'
            

        }
        success {
            echo 'JENKINS PIPELINE SUCCESSFUL'
        }
        failure {
            echo 'JENKINS PIPELINE FAILED'
        }
        unstable {
            echo 'JENKINS PIPELINE WAS MARKED AS UNSTABLE'
        }
        changed {
            echo 'JENKINS PIPELINE STATUS HAS CHANGED SINCE LAST EXECUTION'
        }
    }

     
}
def getReleaseVersion() {
                        def pom = readMavenPom file: 'pom.xml'
                        print pom.version
                        def versionNumber;
                        versionNumber = env.BUILD_NUMBER;
                        print versionNumber
                        return pom.version.replace("-SNAPSHOT", ".${versionNumber}")
                    }                        
